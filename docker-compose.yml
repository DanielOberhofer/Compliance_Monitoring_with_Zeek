version: "3.8"

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  compliancelogs:
    driver: local
  logstashdata01:
    driver: local
  zeek_input:
    driver: local

networks:
  default:
    name: elastic
    external: false

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - "./zeek_conn_template.json:/usr/share/elasticsearch/input_templates/zeek_conn_template.json"
      - "./zeek_first_template.json:/usr/share/elasticsearch/input_templates/zeek_first_template.json"
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       # echo "Setting custom Connection index template"; 
       # curl -X PUT --cacert config/certs/ca/ca.crt -u "elastic:elastic1234" "https://es01:9200/_template/zeek_template" -H "Content-Type: application/json" -d "@/usr/share/elasticsearch/input_templates/zeek_conn_template.json" | echo "$(</dev/stdin)";
       # echo "Setting custom First Compliance Layer";
       # curl -X PUT --cacert config/certs/ca/ca.crt -u "elastic:elastic1234" "https://es01:9200/_template/zeek_template" -H "Content-Type: application/json" -d "@/usr/share/elasticsearch/input_templates/zeek_first_template.json" | echo "$(</dev/stdin)";
       # echo "Index Templates set for Zeek";
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - compliancelogs:/usr/share/elasticsearch/compliancelogs
      - "./zeek-template.json:/tmp/zeek-template.json"
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

 # -------------- Kibana -----------------------#  
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
      # Das ist nur fuer den agent ansatz
     # - ./KibanaDocs/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
      
      
# -------------- Filebeat -----------------------#
  filebeat01:
    depends_on:
      logstash01:
        condition: service_healthy
    build:
     context: ./Filebeat/
     dockerfile: Dockerfile
    command: >
     bash -c '
        filebeat -e -strict.perms=false;
        filebeat modules enable zeek;
        filebeat setup --pipelines --modules zeek
     '
    user: root
    links:
      - logstash01:logstash01
    volumes:
      - certs:/usr/share/filebeat/certs
      - compliancelogs:/usr/share/filebeat/compliancelogs/
      #- "./Filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      #- ELASTIC_USER=elastic
      #- ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      #- ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      
      
# -------------- Logstash -----------------------#
  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      # Wichtig fÃ¼r die Conf Dateien
      - "./LogstashDocs/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
      # Path for template
      - "./zeek_conn_template.json:/usr/share/logstash/input_templates/zeek_conn_template.json"
      - "./zeek_first_template.json:/usr/share/logstash/input_templates/zeek_first_template.json"
    ports:
      - "5044:5044"
      - "5000/tcp"
      - "5000/udp"
      - "9600:9600"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      retries: 600
      interval: 1s
      
# -------------- Python Parser Service -----------------------#
  parser:
    build:
        context: ./ProcessParser/
        dockerfile: Dockerfile
    volumes:
    - zeek_input:/usr/src/app/output_tsv
    ports:
    - "4321:4321"
    command: "python /usr/src/app/main.py"
    healthcheck:
     test: ["CMD", "curl", "-f", "http://localhost:4321/_node/stats"]
     retries: 600
     interval: 1s
# -------------- Zeek Service -----------------------#
  zeek:
   depends_on:
    es01:
       condition: service_healthy
    kibana:
       condition: service_healthy
   build:
     context: ./ZeekDocs/
     dockerfile: Dockerfile
   ports:
   - "1234:1234"
   volumes:
   - zeek_input:/Zeek/resources
   - compliancelogs:/compliancelogs
   healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1234/_node/stats"]
      retries: 600
      interval: 1s
   command: >
     bash -c 'zeek -r 1000_ICS.pcap compliance.zeek'
    # bash -c 'zeek -i docker1 compliance.zeek'

   